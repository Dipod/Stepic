//Однажды, разбирая старые книги на чердаке, школьник Вася нашёл англо-латинский словарь. Английский он к тому времени знал в совершенстве, и его мечтой было изучить латынь. Поэтому попавшийся словарь был как раз кстати.
//
//К сожалению, для полноценного изучения языка недостаточно только одного словаря: кроме англо-латинского необходим латинско-английский. За неимением лучшего он решил сделать второй словарь из первого.
//
//Как известно, словарь состоит из переводимых слов, к каждому из которых приводится несколько слов-переводов. Для каждого латинского слова, встречающегося где-либо в словаре, Вася предлагает найти все его переводы (то есть все английские слова, для которых наше латинское встречалось в его списке переводов), и считать их и только их переводами этого латинского слова.
//
//Помогите Васе выполнить работу по созданию латинско-английского словаря из англо-латинского.
//
//Входные данные
//
//В первой строке содержится единственное целое число N — количество английских слов в словаре. Далее следует N описаний. Каждое описание содержится в отдельной строке, в которой записано сначала английское слово, затем отделённый пробелами дефис (символ номер 45), затем разделённые запятыми с пробелами переводы этого английского слова на латинский. Переводы отсортированы в лексикографическом порядке. Порядок следования английских слов в словаре также лексикографический.
//
//Все слова состоят только из маленьких латинских букв, длина каждого слова не превосходит 15 символов. Общее количество слов на входе не превышает 100000.
//
//Выходные данные
//
//В первой строке программа должна вывести количество слов в соответствующем данному латинско-английском словаре. Со второй строки выведите сам словарь, в точности соблюдая формат входных данных. В частности, первым должен идти перевод лексикографически минимального латинского слова, далее — второго в этом порядке и т.д. Внутри перевода английские слова должны быть также отсортированы лексикографически.
//
//Sample Input:
//
//    3
//    apple - malum, pomum, popula
//    fruit - baca, bacca, popum
//    punishment - malum, multa
//
//Sample Output:
//
//    7
//    baca - fruit
//    bacca - fruit
//    malum - apple, punishment
//    multa - punishment
//    pomum - apple
//    popula - apple
//    popum - fruit
//
//Напишите программу. Тестируется через stdin → stdout

#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>

using namespace std;

vector <string> getWords(string s){
    int pos = 0, pos2 = 0;
    vector <string> result;
    pos = s.find('-');
    while(pos != -1){
        if(pos2 == 0){
            result.push_back(s.substr(0, pos - 1));
        }else {
            result.push_back(s.substr(pos2, pos - pos2));
        }
        pos2 = pos + 2;
        pos = s.find(',', pos2);
    }
    result.push_back(s.substr(pos2, s.size() - pos2));
    return result;
}

int main(){
    int n = 0, pos = 0;
    cin >> n;
    string currentString;
    getline(cin,currentString);
    map <string,set <string>> dictionary;
    map <string,set <string>>::iterator it;
    for(int i = 0; i < n; i++){
        vector <string> words;
        getline(cin,currentString);
        words = getWords(currentString);
        for(int i = 1; i < words.size(); i++){
            it = dictionary.find(words[i]);
            if(it != dictionary.end()){
                (*it).second.insert(words[0]);
            }else{
                set <string> temp;
                temp.insert(words[0]);
                dictionary[words[i]] = temp;
            }
        }
    }
    cout << dictionary.size() << endl;
    for(auto now : dictionary){
        cout << now.first << " - ";
        pos = 0;
        for (auto now2 : now.second){
            if(pos == 0){
                cout << now2;
            }else{
                cout << ", " << now2;
            }
            pos++;
        }
        cout << endl;
    }
}